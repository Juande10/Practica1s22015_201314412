/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Grafico;

import Estructuras.NodoObjeto;
import Estructuras.NodoOrtogonal;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author Juande
 */
public class Juego extends javax.swing.JFrame {

    Graficadora grafica = new Graficadora();
    int vida = 5;
    int puntos =0;
    /**
     * Creates new form Juego
     */
    public Juego() {
        initComponents();
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        PintarMatriz();
        jButton2.addKeyListener(new KeyListener() {
            @Override
            public void keyPressed(KeyEvent ke) {
                
                switch(ke.getKeyCode()){
                    case KeyEvent.VK_RIGHT:
                    MoverMarioDerecha();
                    
                break;
                
                case KeyEvent.VK_LEFT:
                    MoverMarioIzquierda();
                break;
                
                
        }
            }

            @Override
            public void keyTyped(KeyEvent ke) {
                
            }

            @Override
            public void keyReleased(KeyEvent ke) {
                
            }
            
        });
    }
    
    
    private class Enemigo extends Thread{
        public void Run(){
            for(NodoOrtogonal temp1 = InterfazPrincipal.tablero.getRaiz(); temp1 != null; temp1 = temp1.getArriba()){
                 for(NodoOrtogonal temp2 = temp1; temp2!= null; temp2 = temp2.getSiguiente()){
                     if(temp2.getObjeto() == null){                     
                     }else{
                         if(temp2.getObjeto().getTipo().equals("Koopa")||temp2.getObjeto().getTipo().equals("Goomba")){
                             
                             if(temp2.getAnterior().getObjeto() == null){
                                 temp2.getAnterior().setObjeto(temp2.getObjeto());
                                 temp2.setObjeto(null);
                                 try{
                                     Thread.sleep(1000);
                                 }catch(Exception e){
                                     
                                 }
                                 PintarMatriz();
                                 if(temp2.getAnterior() != null){
                                     LlamarHilo();
                                 }
                             }
                         }
                     }
                 }
            }
        }
    }
    
    public void LlamarHilo(){
        Enemigo h = new Enemigo();
        h.start();
    }
    
    public void PintarMatriz(){
        jPanel1.removeAll();
        ImageIcon nuevoicon = new ImageIcon(getClass().getResource("/Imagenes/Cielo1.png"));
        NodoOrtogonal aux1;
        NodoOrtogonal aux2;
        NodoOrtogonal aux3;
        int x=0;
        int y=0;
        //Imprime desde la fila ultima hasta la primera
        aux1 = InterfazPrincipal.tablero.getRaiz();
        while(aux1.getArriba() != null){
             aux1 = aux1.getArriba();
        }
        for(aux2 = aux1; aux2 != null ; aux2 = aux2.getAbajo()){
            aux3 = aux2;
            y++;
            while(aux3 != null){
                x++;
                aux3.lbl = new JLabel();
                aux3.lbl.setBounds(40*x, 40*y, 39, 39);  
                if(aux3.getObjeto() == null){
                    aux3.lbl.setIcon(nuevoicon);
                }else{
                    aux3.lbl.setIcon(aux3.getObjeto().getImagen());
                }               
                jPanel1.revalidate();
                jPanel1.repaint();
                jPanel1.add(aux3.lbl);               
                aux3 = aux3.getSiguiente();              
            }
            x=0;           
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 719, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 441, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel1);

        jButton1.setText("Graficar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Jugar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 711, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(32, 32, 32)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        switch(evt.getKeyCode()){
            case KeyEvent.VK_RIGHT:
                MoverMarioDerecha();
                break;
                
            case KeyEvent.VK_LEFT:
                break;
        }
    }//GEN-LAST:event_formKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            grafica.GraficarMatriz(InterfazPrincipal.tablero, "Matriz");
            JOptionPane.showMessageDialog(rootPane, "Se creo las grafica de la matriz");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Error al crear la grafica de la matriz");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    
    public void MoverMarioDerecha(){
        NodoObjeto temp;
        Boolean i= true;
        for(NodoOrtogonal temp1 = InterfazPrincipal.tablero.getRaiz(); temp1 != null; temp1 = temp1.getArriba()){
            for(NodoOrtogonal temp2 = temp1; temp2!= null; temp2 = temp2.getSiguiente()){
                if(temp2.getObjeto() == null){                   
                }else{
                    if(temp2.getObjeto().getTipo().equals("Mario") && i == true){                       
                        if(temp2.getSiguiente().getObjeto() == null && temp2.getSiguiente().getAbajo().getObjeto() != null){                            
                            temp2.getSiguiente().setObjeto(temp2.getObjeto());
                            temp2.setObjeto(null);
                            PintarMatriz();
                            i = false;
                        }
                        else if(temp2.getSiguiente().getObjeto() == null && temp2.getSiguiente().getAbajo().getObjeto() == null){                            
                            temp2.getSiguiente().getAbajo().setObjeto(temp2.getObjeto());
                            temp2.setObjeto(null);
                            PintarMatriz();
                            JOptionPane.showMessageDialog(null,"Perdio");
                            i = false;
                        }
                        else if(temp2.getSiguiente().getObjeto().getTipo().equals("Hongo")){
                            temp2.getSiguiente().setObjeto(temp2.getObjeto());
                            temp2.setObjeto(null);
                            PintarMatriz();
                            this.vida = this.vida + 1;
                            System.out.println("Se ha aumentado una vida");
                            System.out.println("Su vida actual es: "+this.vida);
                            i=false;
                        }
                        else if(temp2.getSiguiente().getObjeto().getTipo().equals("Moneda")){
                            temp2.getSiguiente().setObjeto(temp2.getObjeto());
                            temp2.setObjeto(null);
                            PintarMatriz();
                            this.puntos = this.puntos + 1;
                            System.out.println("Ha ganado 1 punto!");
                            System.out.println("Sus puntos actuales son: "+this.puntos);
                            i=false;
                        }
                        else if(temp2.getSiguiente().getObjeto().getTipo().equals("Castillo")){
                            temp2.getSiguiente().setObjeto(temp2.getObjeto());
                            temp2.setObjeto(null);
                            PintarMatriz();
                            this.puntos = this.puntos + 1;
                            JOptionPane.showMessageDialog(null,"¡HAS GANADO!");
                            i=false;
                        }
                        else if(temp2.getSiguiente() == null){
                            System.out.println("Llego al final");
                        }
                        else if(temp2.getSiguiente().getObjeto().getTipo().equals("Pared")){
                            
                        }else if(temp2.getSiguiente().getObjeto().getTipo().equals("Goomba") || temp2.getSiguiente().getObjeto().getTipo().equals("Koopa")){
                            if(this.vida<=0){
                                JOptionPane.showMessageDialog(null, "Ha perdido");
                                i = false;
                            }else{
                                this.vida = vida - 1;
                                System.out.println("Su vida actual es: "+this.vida);
                                i = false;
                            }
                            
                        }
                    }
                }
            }
        }
    }
    
    public void MoverMarioIzquierda(){
        NodoObjeto temp;
        Boolean i= true;
        try{
            for(NodoOrtogonal temp1 = InterfazPrincipal.tablero.getRaiz(); temp1 != null; temp1 = temp1.getArriba()){
            for(NodoOrtogonal temp2 = temp1; temp2!= null; temp2 = temp2.getSiguiente()){
                if(temp2.getObjeto() == null){                   
                }else{
                    if(temp2.getObjeto().getTipo().equals("Mario") && i == true){                       
                        if(temp2.getAnterior().getObjeto() == null){                            
                            temp2.getAnterior().setObjeto(temp2.getObjeto());
                            temp2.setObjeto(null);
                            PintarMatriz();
                            i = false;
                        }
                    }
                    if(temp2.getObjeto().getTipo().equals("Mario") && i == true){                       
                        if(temp2.getAnterior().getObjeto() == null){                            
                            temp2.getAnterior().setObjeto(temp2.getObjeto());
                            temp2.setObjeto(null);
                            PintarMatriz();
                            i = false;
                        }
                        else if(temp2.getSiguiente().getObjeto() == null && temp2.getSiguiente().getAbajo().getObjeto() == null){                            
                            temp2.getSiguiente().getAbajo().setObjeto(temp2.getObjeto());
                            temp2.setObjeto(null);
                            PintarMatriz();
                            JOptionPane.showMessageDialog(null,"Perdio");
                            i = false;
                        }
                        else if(temp2.getAnterior().getObjeto().getTipo().equals("Hongo")){
                            temp2.getAnterior().setObjeto(temp2.getObjeto());
                            temp2.setObjeto(null);
                            PintarMatriz();
                            this.vida = this.vida + 1;
                            System.out.println("Se ha aumentado una vida");
                            System.out.println("Su vida actual es: "+this.vida);
                            i=false;
                        }
                        else if(temp2.getAnterior().getObjeto().getTipo().equals("Moneda")){
                            temp2.getAnterior().setObjeto(temp2.getObjeto());
                            temp2.setObjeto(null);
                            PintarMatriz();
                            this.puntos = this.puntos + 1;
                            System.out.println("Ha ganado 1 punto!");
                            System.out.println("Sus puntos actuales son: "+this.puntos);
                            i=false;
                        }else if(temp2.getAnterior().getObjeto().getTipo().equals("Castillo")){
                            temp2.getAnterior().setObjeto(temp2.getObjeto());
                            temp2.setObjeto(null);
                            PintarMatriz();
                            this.puntos = this.puntos + 1;
                            JOptionPane.showMessageDialog(null,"¡HAS GANADO!");
                            i=false;
                        }
                        else if(temp2.getAnterior().getObjeto().getTipo().equals("Goomba") || temp2.getAnterior().getObjeto().getTipo().equals("Koopa")){
                            if(this.vida<=0){
                                JOptionPane.showMessageDialog(null, "Ha perdido");
                                i = false;
                            }else{
                                this.vida = vida - 1;
                                System.out.println("Su vida actual es: "+this.vida);
                                i = false;
                            }
                            
                        }
                    }
                }
            }
        }
        }catch(Exception e){
            
        }
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Juego().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
